{"ast":null,"code":"var _jsxFileName = \"C:\\\\Full-stack\\\\Backend\\\\FSND\\\\Welcome_To_API\\\\projects\\\\bookshelf-api\\\\frontend\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport './stylesheets/App.css';\nimport FormView from './components/FormView';\nimport Book from './components/Book';\n\nclass App extends Component {\n  constructor(props) {\n    super();\n\n    this.getBooks = () => {\n      $.ajax({\n        url: \"/books?page=\".concat(this.state.page),\n        //TODO: update request URL\n        type: \"GET\",\n        success: result => {\n          this.setState({\n            totalBooks: result.total_books,\n            books: result.books\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load books. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.deleteBook = id => {\n      if (window.confirm('Are you sure you want to delete the book?')) {\n        $.ajax({\n          url: \"/books/\".concat(id),\n          //TODO: update request URL\n          type: \"DELETE\",\n          success: result => {\n            this.getBooks();\n          },\n          error: error => {\n            alert('Unable to delete the book.');\n            return;\n          }\n        });\n      }\n    };\n\n    this.changeRating = (id, rating) => {\n      let books = [...this.state.books];\n      let targetBook = books.find(book => book.id === id);\n      $.ajax({\n        url: \"/books/\".concat(id),\n        //TODO: update request URL\n        type: \"PATCH\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          'rating': rating\n        }),\n        success: result => {\n          targetBook.rating = rating;\n          this.setState({\n            books\n          });\n        },\n        error: error => {\n          alert('Unable to update the rating.');\n          return;\n        }\n      });\n    };\n\n    this.state = {\n      page: 1,\n      totalBooks: 0,\n      books: []\n    };\n  }\n\n  componentDidMount() {\n    this.getBooks();\n  }\n\n  selectPage(num) {\n    this.setState({\n      page: num\n    }, () => this.getBooks());\n  }\n\n  createPagination() {\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalBooks / 8);\n\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(React.createElement(\"div\", {\n        key: i,\n        className: \"page-num \".concat(i === this.state.page ? 'active' : ''),\n        onClick: () => {\n          this.selectPage(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, i));\n    }\n\n    return pageNumbers;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"main-view\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bookshelf-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, this.state.books.map(book => React.createElement(Book, Object.assign({\n      key: book.id,\n      deleteBook: this.deleteBook,\n      changeRating: this.changeRating\n    }, book, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: \"pagination-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, this.createPagination())), React.createElement(FormView, {\n      searchBooks: this.searchBooks,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Full-stack\\Backend\\FSND\\Welcome_To_API\\projects\\bookshelf-api\\frontend\\src\\App.js"],"names":["React","Component","$","FormView","Book","App","constructor","props","getBooks","ajax","url","state","page","type","success","result","setState","totalBooks","total_books","books","error","alert","deleteBook","id","window","confirm","changeRating","rating","targetBook","find","book","dataType","contentType","data","JSON","stringify","componentDidMount","selectPage","num","createPagination","pageNumbers","maxPage","Math","ceil","i","push","render","map","searchBooks"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport $ from 'jquery';\r\n\r\nimport './stylesheets/App.css';\r\nimport FormView from './components/FormView';\r\nimport Book from './components/Book';\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super();\r\n    this.state = {\r\n      page: 1,\r\n      totalBooks: 0,\r\n      books: []\r\n    }\r\n  }\r\n\r\n  getBooks = () => {\r\n    $.ajax({\r\n      url: `/books?page=${this.state.page}`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: (result) => {\r\n        this.setState({\r\n          totalBooks: result.total_books,\r\n          books: result.books \r\n        })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load books. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  deleteBook = (id) => {\r\n    if(window.confirm('Are you sure you want to delete the book?')) {\r\n      $.ajax({\r\n        url: `/books/${id}`, //TODO: update request URL\r\n        type: \"DELETE\",\r\n        success: (result) => {\r\n          this.getBooks();\r\n        },\r\n        error: (error) => {\r\n          alert('Unable to delete the book.')\r\n          return;\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  changeRating = (id, rating) => {\r\n    let books = [...this.state.books]\r\n    let targetBook = books.find((book) => book.id === id);\r\n\r\n    $.ajax({\r\n      url: `/books/${id}`, //TODO: update request URL\r\n      type: \"PATCH\",\r\n      dataType: 'json',\r\n      contentType: 'application/json',\r\n      data: JSON.stringify({'rating': rating}),\r\n      success: (result) => {\r\n        targetBook.rating = rating\r\n        this.setState({books})\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to update the rating.')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  \r\n  componentDidMount(){\r\n    this.getBooks()\r\n  }\r\n\r\n  selectPage(num) {\r\n    this.setState({page: num}, () => this.getBooks());\r\n  }\r\n\r\n  createPagination(){\r\n    let pageNumbers = [];\r\n    let maxPage = Math.ceil(this.state.totalBooks / 8)\r\n    for (let i = 1; i <= maxPage; i++) {\r\n      pageNumbers.push(\r\n        <div\r\n          key={i}\r\n          className={`page-num ${i === this.state.page ? 'active' : ''}`}\r\n          onClick={() => {this.selectPage(i)}}>{i}\r\n        </div>)\r\n    }\r\n    return pageNumbers;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div id=\"main-view\">\r\n          <div className=\"bookshelf-container\">\r\n            {this.state.books.map((book) => (\r\n              <Book\r\n                key={book.id}\r\n                deleteBook={this.deleteBook}\r\n                changeRating={this.changeRating}\r\n                {...book}\r\n              />\r\n            ))}\r\n          </div>\r\n          <div className=\"pagination-menu\">\r\n              {this.createPagination()}\r\n          </div>\r\n        </div>\r\n        <FormView searchBooks={this.searchBooks}/>\r\n      </div>\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}